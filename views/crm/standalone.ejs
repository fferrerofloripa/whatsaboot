<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    

    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#eff6ff',
                            100: '#dbeafe',
                            200: '#bfdbfe',
                            300: '#93c5fd',
                            400: '#60a5fa',
                            500: '#3b82f6',
                            600: '#2563eb',
                            700: '#1d4ed8',
                            800: '#1e40af',
                            900: '#1e3a8a'
                        }
                    }
                }
            }
        }
    </script>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <!-- Socket.IO -->
    <script src="/socket.io/socket.io.js"></script>
    
    <style>
        .conversation-item:hover {
            transform: translateX(4px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .conversation-item.selected {
            background-color: #eff6ff !important;
            border-left: 4px solid #3b82f6 !important;
            transform: translateX(4px) !important;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="min-h-screen">
        <!-- Header -->
        <header class="bg-white shadow-sm border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center h-16">
                    <div class="flex items-center">
                        <h1 class="text-xl font-semibold text-gray-900">
                            <i class="fas fa-comments text-primary-600 mr-2"></i>
                            CRM - Conversaciones
                        </h1>
                    </div>
                    
                    <div class="flex items-center space-x-4">
                        <button onclick="window.refreshConversations ? window.refreshConversations() : alert('Auto-load not ready yet')" class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg text-sm font-medium transition-colors">
                            üîÑ Refrescar
                        </button>
                        <button onclick="window.testAPI ? window.testAPI() : alert('Test not ready')" class="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg text-sm font-medium transition-colors">
                            üß™ Test API
                        </button>
                        
                        <div class="flex items-center space-x-3">
                            <img src="<%= user.avatar || '/images/default-avatar.png' %>" alt="Avatar" class="w-8 h-8 rounded-full">
                            <span class="text-sm font-medium text-gray-700"><%= user.displayName %></span>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-8rem)]">
                
                <!-- Left Sidebar - Conversations List -->
                <div class="lg:col-span-1 bg-white rounded-lg shadow overflow-hidden">
                    <div class="p-6 border-b border-gray-200">
                        <div class="flex items-center justify-between mb-4">
                            <h2 class="text-lg font-semibold text-gray-900">Conversaciones</h2>
                            <div class="flex items-center space-x-2">
                                <span class="text-sm text-gray-500">
                                    <i class="fas fa-circle text-green-400 mr-1"></i>
                                    Instancia 2
                                </span>
                            </div>
                        </div>
                        
                        <!-- Status Tabs -->
                        <div class="flex space-x-1 bg-gray-100 rounded-lg p-1">
                            <button onclick="filterByStatus('inbox')" class="tab-button flex-1 py-2 px-3 text-sm font-medium rounded-md transition-all duration-200 bg-white text-primary-600 shadow-sm" data-status="inbox">
                                <span>Entrada</span>
                                <span id="inbox-count" class="ml-2 px-2 py-0.5 bg-primary-100 text-primary-600 rounded-full text-xs">0</span>
                            </button>
                            <button onclick="filterByStatus('pending')" class="tab-button flex-1 py-2 px-3 text-sm font-medium rounded-md transition-all duration-200 text-gray-600 hover:text-gray-900" data-status="pending">
                                <span>Esperando</span>
                                <span id="pending-count" class="ml-2 px-2 py-0.5 bg-gray-200 text-gray-600 rounded-full text-xs">0</span>
                            </button>
                            <button onclick="filterByStatus('closed')" class="tab-button flex-1 py-2 px-3 text-sm font-medium rounded-md transition-all duration-200 text-gray-600 hover:text-gray-900" data-status="closed">
                                <span>Finalizados</span>
                                <span id="closed-count" class="ml-2 px-2 py-0.5 bg-gray-200 text-gray-600 rounded-full text-xs">0</span>
                            </button>
                        </div>
                        
                        <!-- Search Bar -->
                        <div class="mt-4 relative">
                            <input type="text" id="searchInput" placeholder="Buscar conversaciones..." 
                                   class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent text-sm"
                                   oninput="filterConversations(this.value)"
                                   onkeyup="filterConversations(this.value)">
                            <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                        </div>
                    </div>
                    
                    <!-- Conversations List -->
                    <div class="flex-1 overflow-y-auto">
                        <div id="conversationsList" class="divide-y divide-gray-200">
                            <!-- Conversations will be loaded here -->
                            <div class="p-8 text-center text-gray-500">
                                <div class="inline-block w-6 h-6 border-2 border-gray-300 border-t-primary-500 rounded-full animate-spin mb-4"></div>
                                <p>Cargando conversaciones...</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Content - Messages -->
                <div class="lg:col-span-2 bg-white rounded-lg shadow overflow-hidden flex flex-col">
                    <div class="flex-1 flex items-center justify-center text-gray-500">
                        <div class="text-center">
                            <i class="fas fa-comments text-6xl text-gray-300 mb-4"></i>
                            <h3 class="text-lg font-medium text-gray-900 mb-2">Selecciona una conversaci√≥n</h3>
                            <p class="text-sm text-gray-500">Elige una conversaci√≥n de la lista para ver los mensajes</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



    <!-- Auto-Load Script -->
    <script>
        console.log('‚úÖ CRM Script Loaded');
        
        try {
        
        // Get active instance ID
        function getActiveInstanceId() {
            // Try to get from instances data passed from server
            var instances = <%- JSON.stringify(instances || []) %>;
            console.log('üîç Available instances:', instances);
            
            if (instances && instances.length > 0) {
                // Find first connected instance or just use the first one
                var activeInstance = instances.find(i => i.status === 'connected') || instances[0];
                console.log('üì± Selected instance:', activeInstance);
                return activeInstance.id;
            }
            console.log('‚ùå No instances found');
            return null;
        }
        
        // Auto-load function
        function autoLoadConversations() {
            console.log('üîÑ Loading conversations...');
            
            var instanceId = getActiveInstanceId();
            if (!instanceId) {
                console.error('‚ùå No active instance found');
                var container = document.getElementById('conversationsList');
                if (container) {
                    container.innerHTML = '<div style="padding: 40px; text-align: center; color: #ef4444;">No hay instancias de WhatsApp activas<br><a href="/dashboard" style="margin-top: 12px; padding: 8px 16px; background: #3b82f6; color: white; text-decoration: none; border-radius: 6px;">Crear Instancia</a></div>';
                }
                return;
            }
            
            console.log('üì± Using instance ID:', instanceId);
            
            // Inicializar variables de paginaci√≥n
            window.currentPage = 1;
            window.isLoading = false;
            window.hasMorePages = true;
            window.currentInstanceId = instanceId;
            window.allGroups = [];
            window.allIndividuals = [];
            window.updateInterval = null;
            window.lastUpdateTime = Date.now();
            
            // Cargar primera p√°gina
            loadConversationsPage(instanceId, 1, false);
        }
        
        // Funci√≥n para cargar conversaciones con paginaci√≥n
        function loadConversationsPage(instanceId, page, append) {
            if (window.isLoading) return;
            
            console.log(`üîÑ Loading conversations page ${page}... Append: ${append}`);
            window.isLoading = true;
            
            var container = document.getElementById('conversationsList');
            
            // Mostrar estado de carga
            if (!append && container) {
                container.innerHTML = '<div style="padding: 40px; text-align: center; color: #6b7280;"><div style="display: inline-block; width: 20px; height: 20px; border: 2px solid #e5e7eb; border-top: 2px solid #3b82f6; border-radius: 50%; animation: spin 1s linear infinite; margin-bottom: 12px;"></div><br>Cargando conversaciones...</div>';
            } else if (append && container) {
                var loadingIndicator = document.createElement('div');
                loadingIndicator.id = 'loadingMore';
                loadingIndicator.style.cssText = 'padding: 20px; text-align: center; color: #6b7280; border-top: 1px solid #e5e7eb;';
                loadingIndicator.innerHTML = '<div style="display: inline-block; width: 16px; height: 16px; border: 2px solid #e5e7eb; border-top: 2px solid #3b82f6; border-radius: 50%; animation: spin 1s linear infinite; margin-right: 8px;"></div>Cargando m√°s conversaciones...';
                container.appendChild(loadingIndicator);
            }
            
            fetch(`/api/conversations/instance/${instanceId}?page=${page}&limit=10`, {credentials: 'include'})
            .then(r => r.json())
            .then(d => {
                console.log(`‚úÖ Loaded page ${page}:`, d.data?.conversations?.length, 'conversations');
                
                // Remover indicador de carga
                var loadingIndicator = document.getElementById('loadingMore');
                if (loadingIndicator) {
                    loadingIndicator.remove();
                }
                
                if (d.data?.conversations) {
                    // Separar grupos y conversaciones individuales
                    var groups = d.data.conversations.filter(conv => conv.isGroup);
                    var individuals = d.data.conversations.filter(conv => !conv.isGroup);
                    
                    if (append) {
                        // Agregar a las listas existentes
                        window.allGroups = window.allGroups.concat(groups);
                        window.allIndividuals = window.allIndividuals.concat(individuals);
                    } else {
                        // Primera carga
                        window.allGroups = groups;
                        window.allIndividuals = individuals;
                    }
                    
                    // Verificar si hay m√°s p√°ginas
                    window.hasMorePages = d.data.pagination && d.data.pagination.page < d.data.pagination.pages;
                    
                    // Renderizar todas las conversaciones
                    renderAllConversations();
                    
                    // Si hay menos de 10 conversaciones, intentar sincronizar desde WhatsApp
                    if (!append && d.data.conversations.length < 10) {
                        console.log('üîÑ Pocas conversaciones encontradas, sincronizando desde WhatsApp...');
                        syncFromWhatsApp(instanceId);
                    }
                } else {
                    if (!append && container) {
                        container.innerHTML = '<div style="padding: 40px; text-align: center; color: #6b7280;">No hay conversaciones<br><button onclick="syncFromWhatsApp(' + instanceId + ')" style="margin-top: 12px; padding: 8px 16px; background: #10b981; color: white; border: none; border-radius: 6px; cursor: pointer;">üì± Sincronizar desde WhatsApp</button></div>';
                    }
                }
                
                window.isLoading = false;
            })
            .catch(e => {
                console.error('‚ùå Error loading conversations:', e);
                var loadingIndicator = document.getElementById('loadingMore');
                if (loadingIndicator) {
                    loadingIndicator.remove();
                }
                
                if (!append && container) {
                    container.innerHTML = '<div style="padding: 40px; text-align: center; color: #ef4444;">Error cargando conversaciones<br><button onclick="loadConversationsPage(' + instanceId + ', 1, false)" style="margin-top: 12px; padding: 8px 16px; background: #3b82f6; color: white; border: none; border-radius: 6px; cursor: pointer;">Reintentar</button></div>';
                }
                
                window.isLoading = false;
            });
        }
        
        // Funci√≥n para renderizar todas las conversaciones
        function renderAllConversations() {
            var container = document.getElementById('conversationsList');
            if (!container) return;
            
            container.innerHTML = '';
            
            // Mostrar grupos primero si hay alguno
            if (window.allGroups.length > 0) {
                var groupHeader = document.createElement('div');
                groupHeader.style.cssText = 'padding: 12px 16px; background: #f8fafc; border-bottom: 1px solid #e5e7eb; font-weight: 600; color: #374151; font-size: 13px; text-transform: uppercase; letter-spacing: 0.5px;';
                groupHeader.innerHTML = 'üë• Grupos (' + window.allGroups.length + ')';
                container.appendChild(groupHeader);
                
                window.allGroups.forEach(function(conv) {
                    renderConversationItem(conv, container, true);
                });
            }
            
            // Mostrar conversaciones individuales
            if (window.allIndividuals.length > 0) {
                var individualHeader = document.createElement('div');
                individualHeader.style.cssText = 'padding: 12px 16px; background: #f8fafc; border-bottom: 1px solid #e5e7eb; font-weight: 600; color: #374151; font-size: 13px; text-transform: uppercase; letter-spacing: 0.5px;';
                individualHeader.innerHTML = 'üë§ Conversaciones (' + window.allIndividuals.length + ')';
                container.appendChild(individualHeader);
                
                window.allIndividuals.forEach(function(conv) {
                    renderConversationItem(conv, container, false);
                });
            }
            
            // Agregar bot√≥n "Cargar m√°s" si hay m√°s p√°ginas
            if (window.hasMorePages) {
                var loadMoreButton = document.createElement('div');
                loadMoreButton.style.cssText = 'padding: 20px; text-align: center; border-top: 1px solid #e5e7eb;';
                loadMoreButton.innerHTML = '<button onclick="loadMoreConversations()" style="padding: 12px 24px; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer; font-weight: 600;">üìÑ Cargar m√°s conversaciones</button>';
                container.appendChild(loadMoreButton);
            }
        }
        
        // Funci√≥n para cargar m√°s conversaciones
        function loadMoreConversations() {
            if (!window.hasMorePages || window.isLoading) return;
            
            window.currentPage++;
            loadConversationsPage(window.currentInstanceId, window.currentPage, true);
        }
        
        // Funci√≥n para sincronizar desde WhatsApp
        function syncFromWhatsApp(instanceId) {
            console.log('üîÑ Sincronizando conversaciones desde WhatsApp...');
            
            var container = document.getElementById('conversationsList');
            if (container) {
                container.innerHTML = '<div style="padding: 40px; text-align: center; color: #6b7280;"><div style="display: inline-block; width: 20px; height: 20px; border: 2px solid #e5e7eb; border-top: 2px solid #10b981; border-radius: 50%; animation: spin 1s linear infinite; margin-bottom: 12px;"></div><br>Verificando conexi√≥n WhatsApp...</div>';
            }
            
            // Primero probar el endpoint de test
            fetch(`/api/conversations/instance/${instanceId}/test`, {
                credentials: 'include'
            })
            .then(r => {
                console.log('üîç Test response status:', r.status);
                console.log('üîç Test response headers:', r.headers.get('content-type'));
                if (!r.ok) {
                    throw new Error(`HTTP ${r.status}: ${r.statusText}`);
                }
                return r.text(); // Primero obtener como texto para ver qu√© llega
            })
            .then(text => {
                console.log('üîç Test response text:', text.substring(0, 200));
                try {
                    return JSON.parse(text);
                } catch (e) {
                    throw new Error(`Respuesta no es JSON v√°lido: ${text.substring(0, 100)}`);
                }
            })
            .then(testData => {
                console.log('üß™ Test result:', testData);
                
                if (!testData.success || !testData.data.clientExists) {
                    throw new Error('Cliente WhatsApp no encontrado');
                }
                
                if (!testData.data.clientReady) {
                    throw new Error('Cliente WhatsApp no est√° listo');
                }
                
                // Si el test pasa, proceder con la sincronizaci√≥n
                if (container) {
                    container.innerHTML = '<div style="padding: 40px; text-align: center; color: #6b7280;"><div style="display: inline-block; width: 20px; height: 20px; border: 2px solid #e5e7eb; border-top: 2px solid #10b981; border-radius: 50%; animation: spin 1s linear infinite; margin-bottom: 12px;"></div><br>Sincronizando desde WhatsApp...</div>';
                }
                
                return fetch(`/api/conversations/instance/${instanceId}/sync`, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    credentials: 'include',
                    body: JSON.stringify({limit: 20})
                });
            })
            .then(r => {
                console.log('üîç Sync response status:', r.status);
                console.log('üîç Sync response headers:', r.headers.get('content-type'));
                if (!r.ok) {
                    throw new Error(`HTTP ${r.status}: ${r.statusText}`);
                }
                return r.text();
            })
            .then(text => {
                console.log('üîç Sync response text:', text.substring(0, 200));
                try {
                    return JSON.parse(text);
                } catch (e) {
                    throw new Error(`Respuesta no es JSON v√°lido: ${text.substring(0, 100)}`);
                }
            })
            .then(d => {
                console.log('‚úÖ Sincronizaci√≥n completada:', d);
                if (d.success) {
                    // Recargar conversaciones despu√©s de la sincronizaci√≥n
                    window.currentPage = 1;
                    window.allGroups = [];
                    window.allIndividuals = [];
                    loadConversationsPage(instanceId, 1, false);
                } else {
                    if (container) {
                        container.innerHTML = '<div style="padding: 40px; text-align: center; color: #ef4444;">Error en sincronizaci√≥n: ' + (d.message || 'Error desconocido') + '<br><button onclick="syncFromWhatsApp(' + instanceId + ')" style="margin-top: 12px; padding: 8px 16px; background: #10b981; color: white; border: none; border-radius: 6px; cursor: pointer;">Reintentar</button></div>';
                    }
                }
            })
            .catch(e => {
                console.error('‚ùå Error sincronizando:', e);
                var errorMessage = e.message || 'Error desconocido';
                if (container) {
                    container.innerHTML = '<div style="padding: 40px; text-align: center; color: #ef4444;">Error: ' + errorMessage + '<br><button onclick="syncFromWhatsApp(' + instanceId + ')" style="margin-top: 12px; padding: 8px 16px; background: #10b981; color: white; border: none; border-radius: 6px; cursor: pointer;">Reintentar</button><br><button onclick="testWhatsAppConnection(' + instanceId + ')" style="margin-top: 8px; padding: 6px 12px; background: #6b7280; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">üß™ Test Conexi√≥n</button></div>';
                }
            });
        }
        
        // Funci√≥n para probar la conexi√≥n de WhatsApp
        function testWhatsAppConnection(instanceId) {
            console.log('üß™ Testing WhatsApp connection...');
            
            fetch(`/api/conversations/instance/${instanceId}/test`, {
                credentials: 'include'
            })
            .then(r => {
                console.log('üîç Test response status:', r.status);
                console.log('üîç Test response headers:', r.headers.get('content-type'));
                if (!r.ok) {
                    throw new Error(`HTTP ${r.status}: ${r.statusText}`);
                }
                return r.text();
            })
            .then(text => {
                console.log('üîç Test response text:', text.substring(0, 200));
                try {
                    const d = JSON.parse(text);
                    console.log('üß™ Test result:', d);
                    alert('Test Result:\\n' + JSON.stringify(d.data, null, 2));
                } catch (e) {
                    console.error('‚ùå Test JSON parse error:', e);
                    alert('Test Error - Respuesta no es JSON:\\n' + text.substring(0, 300));
                }
            })
            .catch(e => {
                console.error('‚ùå Test error:', e);
                alert('Test Error: ' + e.message);
            });
        }
        
        // Configurar scroll infinito
        function setupInfiniteScroll() {
            var conversationsContainer = document.getElementById('conversationsList');
            if (!conversationsContainer) return;
            
            conversationsContainer.addEventListener('scroll', function() {
                if (window.isLoading || !window.hasMorePages) return;
                
                var scrollTop = this.scrollTop;
                var scrollHeight = this.scrollHeight;
                var clientHeight = this.clientHeight;
                
                // Si est√° cerca del final (90% del scroll)
                if (scrollTop + clientHeight >= scrollHeight * 0.9) {
                    console.log('üîÑ Scroll infinito activado');
                    loadMoreConversations();
                }
            });
        }
        
        // Funci√≥n para actualizaciones autom√°ticas
        function startAutoUpdates() {
            // Limpiar intervalo anterior si existe
            if (window.updateInterval) {
                clearInterval(window.updateInterval);
            }
            
            // Actualizar cada 30 segundos (reducido para evitar spam)
            window.updateInterval = setInterval(function() {
                if (!window.isLoading && window.currentInstanceId && document.visibilityState === 'visible') {
                    console.log('üîÑ Auto-actualizando conversaciones...');
                    refreshConversations();
                }
            }, 30000);
            
            console.log('‚úÖ Auto-actualizaciones iniciadas (cada 30s)');
        }
        
        // Funci√≥n para refrescar conversaciones sin resetear paginaci√≥n
        function refreshConversations() {
            if (!window.currentInstanceId) return;
            
            fetch(`/api/conversations/instance/${window.currentInstanceId}?page=1&limit=10&timestamp=${Date.now()}`, {
                credentials: 'include'
            })
            .then(r => r.json())
            .then(d => {
                if (d.success && d.data?.conversations) {
                    // Actualizar solo la primera p√°gina para ver nuevos mensajes
                    var newGroups = d.data.conversations.filter(conv => conv.isGroup);
                    var newIndividuals = d.data.conversations.filter(conv => !conv.isGroup);
                    
                    // Reemplazar los primeros elementos con los actualizados
                    window.allGroups = [...newGroups, ...window.allGroups.slice(newGroups.length)];
                    window.allIndividuals = [...newIndividuals, ...window.allIndividuals.slice(newIndividuals.length)];
                    
                    renderAllConversations();
                    console.log('‚úÖ Conversaciones actualizadas autom√°ticamente');
                }
            })
            .catch(e => {
                console.warn('‚ö†Ô∏è Error en auto-actualizaci√≥n:', e.message);
            });
        }
        
        // Funci√≥n para renderizar un item de conversaci√≥n
        function renderConversationItem(conv, container, isGroup) {
            // Create conversation item
            var div = document.createElement('div');
            div.className = 'conversation-item';
            div.style.cssText = 'padding: 16px; border-bottom: 1px solid #e5e7eb; cursor: pointer; transition: all 0.2s ease; background: white;';
            div.dataset.conversationId = conv.id;
            
            var initial = (conv.contactName || 'U').charAt(0).toUpperCase();
            var timeStr = '';
            if (conv.lastMessageAt) {
                var date = new Date(conv.lastMessageAt);
                timeStr = date.toLocaleTimeString('es-ES', {hour: '2-digit', minute: '2-digit'});
            }
            
            var statusColor = '#3b82f6';
            var statusText = 'üì• Entrada';
            if (conv.status === 'pending') {
                statusColor = '#f59e0b';
                statusText = '‚è≥ Pendiente';
            } else if (conv.status === 'closed') {
                statusColor = '#10b981';
                statusText = '‚úÖ Cerrada';
            }
            
            // Avatar HTML - usar foto de perfil si est√° disponible
            var avatarHtml = '';
            if (conv.contactAvatar) {
                avatarHtml = '<img src="' + conv.contactAvatar + '" alt="' + (conv.contactName || 'Usuario') + '" style="width: 48px; height: 48px; border-radius: 50%; object-fit: cover; flex-shrink: 0; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);">';
            } else {
                // Diferentes colores para grupos vs individuales
                var bgColor = isGroup ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)' : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
                var groupIcon = isGroup ? 'üë•' : initial;
                avatarHtml = '<div style="width: 48px; height: 48px; background: ' + bgColor + '; border-radius: 50%; display: flex; align-items: center; justify-content: center; flex-shrink: 0; box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);"><span style="color: white; font-weight: 600; font-size: ' + (isGroup ? '20px' : '16px') + ';">' + groupIcon + '</span></div>';
            }
            
            // Mostrar informaci√≥n adicional para grupos
            var groupInfo = '';
            if (isGroup && conv.groupParticipants && conv.groupParticipants.length > 0) {
                groupInfo = '<span style="font-size: 11px; color: #6b7280; margin-left: 8px;">(' + conv.groupParticipants.length + ' participantes)</span>';
            }
            
            div.innerHTML = 
                '<div style="display: flex; align-items: flex-start; gap: 12px;">' +
                    avatarHtml +
                    '<div style="flex: 1; min-width: 0;">' +
                        '<div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 6px;">' +
                            '<h4 style="font-weight: 600; color: #111827; margin: 0; font-size: 15px; line-height: 1.2;">' + 
                                (isGroup ? 'üë• ' : '') + (conv.contactName || 'Usuario desconocido') + groupInfo +
                            '</h4>' +
                            '<span style="font-size: 12px; color: #6b7280; font-weight: 500;">' + timeStr + '</span>' +
                        '</div>' +
                        '<p style="font-size: 13px; color: #6b7280; margin: 0 0 10px 0; line-height: 1.3; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">' + (conv.lastMessage || 'Sin mensajes recientes') + '</p>' +
                        '<div style="display: flex; align-items: center; justify-content: space-between;">' +
                            '<span style="display: inline-flex; align-items: center; padding: 4px 10px; border-radius: 16px; font-size: 11px; font-weight: 600; background-color: ' + statusColor + '15; color: ' + statusColor + '; border: 1px solid ' + statusColor + '25;">' +
                                statusText +
                            '</span>' +
                            '<div style="display: flex; align-items: center; gap: 8px;">' +
                                (conv.unreadCount > 0 ? '<span style="background: #ef4444; color: white; font-size: 10px; font-weight: 700; padding: 2px 6px; border-radius: 10px; min-width: 18px; text-align: center;">' + conv.unreadCount + '</span>' : '') +
                                '<span style="font-size: 11px; color: #9ca3af; font-weight: 500;">#' + conv.id + '</span>' +
                            '</div>' +
                        '</div>' +
                    '</div>' +
                '</div>';
            
            // Add interactions
            div.addEventListener('mouseenter', function() {
                this.style.backgroundColor = '#f8fafc';
                this.style.transform = 'translateX(4px)';
                this.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.1)';
            });
            
            div.addEventListener('mouseleave', function() {
                if (!this.classList.contains('selected')) {
                    this.style.backgroundColor = 'white';
                    this.style.transform = 'translateX(0)';
                    this.style.boxShadow = 'none';
                }
            });
            
            div.addEventListener('click', function() {
                var items = container.querySelectorAll('.conversation-item');
                for (var j = 0; j < items.length; j++) {
                    items[j].classList.remove('selected');
                    items[j].style.backgroundColor = 'white';
                    items[j].style.borderLeft = 'none';
                    items[j].style.transform = 'translateX(0)';
                }
                
                this.classList.add('selected');
                this.style.backgroundColor = '#eff6ff';
                this.style.borderLeft = '4px solid #3b82f6';
                this.style.transform = 'translateX(4px)';
                
                // Clear unread counter for this conversation
                var unreadBadge = this.querySelector('span[style*="background: #ef4444"]');
                if (unreadBadge) {
                    unreadBadge.remove();
                }
                
                console.log('Selected conversation:', conv.contactName, 'ID:', conv.id, 'Type:', isGroup ? 'Group' : 'Individual');
                loadMessages(conv.id, conv.contactName);
            });
            
            container.appendChild(div);
        }
        
        // Load messages function
        function loadMessages(conversationId, contactName) {
            console.log('üí¨ Loading messages for:', contactName);
            
            // Find the message area (right side of CRM)
            var messageArea = document.querySelector('.lg\\:col-span-2') || 
                             document.querySelector('.flex.flex-col');
            
            if (!messageArea) {
                console.error('‚ùå Message area not found');
                return;
            }
            
            // Show loading in message area
            messageArea.innerHTML = 
                '<div style="padding: 24px; border-bottom: 1px solid #e5e7eb; background: white;">' +
                    '<div style="display: flex; align-items: center; gap: 12px;">' +
                        '<div style="width: 40px; height: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center;">' +
                            '<span style="color: white; font-weight: 600; font-size: 14px;">' + (contactName || 'U').charAt(0).toUpperCase() + '</span>' +
                        '</div>' +
                        '<div>' +
                            '<h3 style="font-weight: 600; color: #111827; margin: 0; font-size: 16px;">' + (contactName || 'Usuario') + '</h3>' +
                            '<p style="color: #6b7280; margin: 0; font-size: 13px;">Conversaci√≥n #' + conversationId + '</p>' +
                        '</div>' +
                    '</div>' +
                '</div>' +
                '<div style="flex: 1; padding: 20px; display: flex; align-items: center; justify-content: center;">' +
                    '<div style="text-align: center; color: #6b7280;">' +
                        '<div style="display: inline-block; width: 24px; height: 24px; border: 2px solid #e5e7eb; border-top: 2px solid #3b82f6; border-radius: 50%; animation: spin 1s linear infinite; margin-bottom: 12px;"></div>' +
                        '<br>Cargando mensajes...' +
                    '</div>' +
                '</div>';
            
            // Fetch messages
            console.log('üîç Fetching messages for conversation:', conversationId);
            fetch('/api/conversations/' + conversationId + '/messages', {credentials: 'include'})
            .then(r => {
                console.log('üì° Response status:', r.status);
                if (!r.ok) {
                    throw new Error(`HTTP ${r.status}: ${r.statusText}`);
                }
                return r.json();
            })
            .then(data => {
                console.log('üì® Messages response:', data);
                if (data.success && data.data) {
                    var messages = data.data;
                    
                    // Render messages
                    var messagesHtml = '';
                    if (messages.length === 0) {
                        messagesHtml = '<div style="flex: 1; display: flex; align-items: center; justify-content: center; color: #9ca3af;">No hay mensajes en esta conversaci√≥n</div>';
                    } else {
                        messagesHtml = '<div style="flex: 1; overflow-y: auto; padding: 16px;">';
                        
                        messages.forEach(function(msg) {
                            var isOutgoing = msg.direction === 'outgoing';
                            var messageTime = msg.sentAt ? new Date(msg.sentAt).toLocaleString('es-ES', {
                                hour: '2-digit', 
                                minute: '2-digit',
                                day: '2-digit',
                                month: '2-digit'
                            }) : '';
                            
                            messagesHtml += 
                                '<div style="margin-bottom: 16px; display: flex; ' + (isOutgoing ? 'justify-content: flex-end;' : 'justify-content: flex-start;') + '">' +
                                    '<div style="max-width: 70%; padding: 12px 16px; border-radius: 18px; ' + 
                                        (isOutgoing ? 
                                            'background: #3b82f6; color: white; border-bottom-right-radius: 4px;' : 
                                            'background: #f3f4f6; color: #111827; border-bottom-left-radius: 4px;'
                                        ) + '">' +
                                        '<div style="word-wrap: break-word; line-height: 1.4;">' + (msg.body || msg.content || 'Mensaje sin contenido') + '</div>' +
                                        '<div style="font-size: 11px; margin-top: 4px; opacity: 0.7;">' + messageTime + '</div>' +
                                    '</div>' +
                                '</div>';
                        });
                        
                        messagesHtml += '</div>';
                    }
                    
                    // Add message input
                    var inputHtml = 
                        '<div style="border-top: 1px solid #e5e7eb; padding: 16px; background: #f9fafb;">' +
                            '<div style="display: flex; gap: 12px; align-items: center;">' +
                                '<input type="text" id="messageInput" placeholder="Escribe un mensaje..." style="flex: 1; padding: 12px 16px; border: 1px solid #d1d5db; border-radius: 24px; outline: none; font-size: 14px;" onkeypress="if(event.key===\'Enter\') sendMessage(' + conversationId + ')">' +
                                '<button onclick="sendMessage(' + conversationId + ')" style="padding: 12px 20px; background: #3b82f6; color: white; border: none; border-radius: 24px; cursor: pointer; font-weight: 500; transition: background 0.2s;" onmouseover="this.style.background=\'#2563eb\'" onmouseout="this.style.background=\'#3b82f6\'">Enviar</button>' +
                            '</div>' +
                        '</div>';
                    
                    messageArea.innerHTML = 
                        '<div style="padding: 24px; border-bottom: 1px solid #e5e7eb; background: white;">' +
                            '<div style="display: flex; align-items: center; gap: 12px;">' +
                                '<div style="width: 40px; height: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center;">' +
                                    '<span style="color: white; font-weight: 600; font-size: 14px;">' + (contactName || 'U').charAt(0).toUpperCase() + '</span>' +
                                '</div>' +
                                '<div>' +
                                    '<h3 style="font-weight: 600; color: #111827; margin: 0; font-size: 16px;">' + (contactName || 'Usuario') + '</h3>' +
                                    '<p style="color: #6b7280; margin: 0; font-size: 13px;">' + messages.length + ' mensajes ‚Ä¢ Conversaci√≥n #' + conversationId + '</p>' +
                                '</div>' +
                            '</div>' +
                        '</div>' +
                        messagesHtml +
                        inputHtml;
                    
                    // Scroll to bottom
                    var messagesContainer = messageArea.querySelector('[style*="overflow-y: auto"]');
                    if (messagesContainer) {
                        setTimeout(function() {
                            messagesContainer.scrollTop = messagesContainer.scrollHeight;
                        }, 100);
                    }
                    
                } else {
                    messageArea.innerHTML = 
                        '<div style="flex: 1; display: flex; align-items: center; justify-content: center; color: #ef4444;">' +
                            'Error cargando mensajes: ' + (data.message || 'Error desconocido') +
                        '</div>';
                }
            })
            .catch(e => {
                console.error('‚ùå Error loading messages:', e);
                messageArea.innerHTML = 
                    '<div style="flex: 1; display: flex; align-items: center; justify-content: center; color: #ef4444;">' +
                        'Error de conexi√≥n: ' + e.message +
                    '</div>';
            });
        }
        
        // Send message function
        function sendMessage(conversationId) {
            var input = document.getElementById('messageInput');
            if (!input || !input.value.trim()) return;
            
            var message = input.value.trim();
            var originalValue = message;
            input.value = '';
            input.disabled = true;
            
            // Show sending indicator
            var sendButton = document.querySelector('button[onclick*="sendMessage"]');
            var originalButtonText = sendButton ? sendButton.innerHTML : '';
            if (sendButton) {
                sendButton.innerHTML = '‚è≥';
                sendButton.disabled = true;
            }
            
            // Add message immediately to UI (optimistic update)
            addMessageToChat({
                body: message,
                direction: 'outgoing',
                sentAt: new Date(),
                status: 'sending'
            });
            
            fetch('/api/conversations/' + conversationId + '/messages', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                credentials: 'include',
                body: JSON.stringify({body: message})
            })
            .then(r => r.json())
            .then(data => {
                console.log('‚úÖ Message sent successfully:', data);
                
                // Update conversation list to show new last message
                updateConversationLastMessage(conversationId, message);
                
                // Mark message as sent
                var sendingMessages = document.querySelectorAll('[data-status="sending"]');
                if (sendingMessages.length > 0) {
                    var lastSending = sendingMessages[sendingMessages.length - 1];
                    lastSending.removeAttribute('data-status');
                    var statusIcon = lastSending.querySelector('.message-status');
                    if (statusIcon) statusIcon.innerHTML = '‚úì';
                }
            })
            .catch(e => {
                console.error('‚ùå Error sending message:', e);
                
                // Mark message as failed and restore input
                var sendingMessages = document.querySelectorAll('[data-status="sending"]');
                if (sendingMessages.length > 0) {
                    var lastSending = sendingMessages[sendingMessages.length - 1];
                    lastSending.setAttribute('data-status', 'failed');
                    lastSending.style.opacity = '0.5';
                    var statusIcon = lastSending.querySelector('.message-status');
                    if (statusIcon) statusIcon.innerHTML = '‚ùå';
                }
                
                input.value = originalValue;
                alert('Error enviando mensaje: ' + e.message);
            })
            .finally(() => {
                input.disabled = false;
                input.focus();
                
                if (sendButton) {
                    sendButton.innerHTML = originalButtonText;
                    sendButton.disabled = false;
                }
            });
        }
        
        // Update conversation last message in the list
        function updateConversationLastMessage(conversationId, message) {
            var conversations = document.querySelectorAll('.conversation-item');
            conversations.forEach(function(conv) {
                var convId = conv.getAttribute('data-conversation-id');
                if (convId == conversationId) {
                    var lastMessageEl = conv.querySelector('.text-sm.text-gray-600');
                    if (lastMessageEl) {
                        lastMessageEl.textContent = message;
                    }
                }
            });
        }
        
        // Filter conversations function
        function filterConversations(searchTerm) {
            
            var conversationItems = document.querySelectorAll('.conversation-item');
            var visibleCount = 0;
            
            conversationItems.forEach(function(item) {
                var contactName = item.querySelector('h4').textContent.toLowerCase();
                var lastMessage = item.querySelector('p').textContent.toLowerCase();
                var conversationId = item.dataset.conversationId;
                
                var searchLower = searchTerm.toLowerCase().trim();
                var isVisible = searchLower === '' || 
                               contactName.includes(searchLower) || 
                               lastMessage.includes(searchLower) ||
                               conversationId.includes(searchLower);
                
                if (isVisible) {
                    item.style.display = 'block';
                    visibleCount++;
                } else {
                    item.style.display = 'none';
                }
            });
            
            // Show/hide no results message
            var container = document.getElementById('conversationsList');
            var noResultsMsg = container.querySelector('.no-results-message');
            
            if (visibleCount === 0 && searchTerm.trim() !== '') {
                if (!noResultsMsg) {
                    var noResults = document.createElement('div');
                    noResults.className = 'no-results-message';
                    noResults.style.cssText = 'padding: 40px 20px; text-align: center; color: #6b7280;';
                    noResults.innerHTML = 
                        '<div style="font-size: 48px; margin-bottom: 16px;">üîç</div>' +
                        '<h3 style="font-weight: 600; margin: 0 0 8px 0; color: #374151;">No se encontraron conversaciones</h3>' +
                        '<p style="margin: 0; font-size: 14px;">Intenta con otros t√©rminos de b√∫squeda</p>' +
                        '<button onclick="clearSearch()" style="margin-top: 16px; padding: 8px 16px; background: #3b82f6; color: white; border: none; border-radius: 6px; cursor: pointer; font-size: 13px;">Limpiar b√∫squeda</button>';
                    container.appendChild(noResults);
                }
            } else if (noResultsMsg) {
                noResultsMsg.remove();
            }
            

        }
        
        // Clear search function
        function clearSearch() {
            var searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.value = '';
                filterConversations('');
                searchInput.focus();
            }
        }
        
        // Status filter function
        function filterByStatus(status) {
            
            var conversationItems = document.querySelectorAll('.conversation-item');
            var visibleCount = 0;
            
            conversationItems.forEach(function(item) {
                var statusBadge = item.querySelector('[style*="border-radius: 16px"]');
                var itemStatus = 'inbox'; // default
                
                if (statusBadge && statusBadge.textContent.includes('Pendiente')) {
                    itemStatus = 'pending';
                } else if (statusBadge && statusBadge.textContent.includes('Cerrada')) {
                    itemStatus = 'closed';
                }
                
                var isVisible = status === 'all' || itemStatus === status;
                
                if (isVisible) {
                    item.style.display = 'block';
                    visibleCount++;
                } else {
                    item.style.display = 'none';
                }
            });
            

        }
        
        // Socket.IO Real-Time Updates
        var socket = io();
        
        socket.on('connect', function() {
            console.log('üîå Connected to Socket.IO for real-time updates');
        });
        
        // Listen for new messages
        socket.on('newMessage', function(data) {
            console.log('üì® New message received:', data);
            
            // Actualizar la conversaci√≥n en la lista si es de la instancia actual
            if (data.instanceId == window.currentInstanceId) {
                updateConversationInList(data.conversationId, data.message, data.contactName);
                
                // If this conversation is currently open, add the message
                var selectedConv = document.querySelector('.conversation-item.selected');
                if (selectedConv && selectedConv.dataset.conversationId == data.conversationId) {
                    addMessageToChat(data.message, false); // false = incoming message
                }
            }
        });
        
        // Listen for new conversations
        socket.on('newConversation', function(data) {
            console.log('üí¨ New conversation created:', data);
            
            // Add new conversation to the top of the list
            addConversationToList(data.conversation);
        });
        
        // Update conversation in list
        function updateConversationInList(conversationId, message, contactName) {
            var existingConv = document.querySelector('[data-conversation-id="' + conversationId + '"]');
            if (existingConv) {
                // Update last message
                var messageP = existingConv.querySelector('p');
                if (messageP) {
                    messageP.textContent = message.body || message.content || 'Nuevo mensaje';
                }
                
                // Update time
                var timeSpan = existingConv.querySelector('span[style*="font-size: 12px"]');
                if (timeSpan) {
                    var now = new Date();
                    timeSpan.textContent = now.toLocaleTimeString('es-ES', {hour: '2-digit', minute: '2-digit'});
                }
                
                // Update unread counter (only if conversation is not currently selected)
                var selectedConv = document.querySelector('.conversation-item.selected');
                if (!selectedConv || selectedConv.dataset.conversationId != conversationId) {
                    var unreadBadge = existingConv.querySelector('span[style*="background: #ef4444"]');
                    if (unreadBadge) {
                        // Increment existing counter
                        var currentCount = parseInt(unreadBadge.textContent) || 0;
                        unreadBadge.textContent = currentCount + 1;
                    } else {
                        // Create new unread badge
                        var badgeContainer = existingConv.querySelector('div[style*="display: flex; align-items: center; gap: 8px;"]');
                        if (badgeContainer) {
                            var newBadge = document.createElement('span');
                            newBadge.style.cssText = 'background: #ef4444; color: white; font-size: 10px; font-weight: 700; padding: 2px 6px; border-radius: 10px; min-width: 18px; text-align: center;';
                            newBadge.textContent = '1';
                            badgeContainer.insertBefore(newBadge, badgeContainer.lastElementChild);
                        }
                    }
                }
                
                // Move to top of its section (groups or individuals)
                var container = document.getElementById('conversationsList');
                if (container) {
                    // Determine if it's a group or individual conversation
                    var isGroupConv = existingConv.querySelector('h4').textContent.includes('üë•');
                    
                    if (isGroupConv) {
                        // Move to top of groups section
                        var groupHeaders = container.querySelectorAll('h3');
                        var groupHeader = null;
                        for (var i = 0; i < groupHeaders.length; i++) {
                            if (groupHeaders[i].textContent.includes('üë• Grupos')) {
                                groupHeader = groupHeaders[i];
                                break;
                            }
                        }
                        if (groupHeader) {
                            container.insertBefore(existingConv, groupHeader.nextElementSibling);
                        } else {
                            container.insertBefore(existingConv, container.firstChild);
                        }
                    } else {
                        // Move to top of individuals section or after groups
                        var individualHeaders = container.querySelectorAll('h3');
                        var individualHeader = null;
                        for (var i = 0; i < individualHeaders.length; i++) {
                            if (individualHeaders[i].textContent.includes('üë§')) {
                                individualHeader = individualHeaders[i];
                                break;
                            }
                        }
                        if (individualHeader) {
                            container.insertBefore(existingConv, individualHeader.nextElementSibling);
                        } else {
                            // If no individual header, add after all groups
                            var allConversations = container.querySelectorAll('[data-conversation-id]');
                            var lastGroupConv = null;
                            for (var i = 0; i < allConversations.length; i++) {
                                var h4 = allConversations[i].querySelector('h4');
                                if (h4 && h4.textContent.includes('üë•')) {
                                    lastGroupConv = allConversations[i];
                                }
                            }
                            if (lastGroupConv) {
                                container.insertBefore(existingConv, lastGroupConv.nextElementSibling);
                            } else {
                                container.insertBefore(existingConv, container.firstChild);
                            }
                        }
                    }
                }
                
                console.log('‚úÖ Conversaci√≥n actualizada:', contactName, '- Nuevo mensaje:', message.body);
            }
        }
        
        // Add message to open chat
        function addMessageToChat(message, isOutgoing) {
            var messagesContainer = document.querySelector('[style*="overflow-y: auto"]');
            if (!messagesContainer) return;
            
            // Handle both old and new message format
            if (typeof isOutgoing === 'undefined') {
                isOutgoing = message.direction === 'outgoing';
            }
            
            var messageTime = message.sentAt ? 
                new Date(message.sentAt).toLocaleString('es-ES', {
                    hour: '2-digit', 
                    minute: '2-digit',
                    day: '2-digit',
                    month: '2-digit'
                }) :
                new Date().toLocaleString('es-ES', {
                    hour: '2-digit', 
                    minute: '2-digit',
                    day: '2-digit',
                    month: '2-digit'
                });
            
            var messageDiv = document.createElement('div');
            messageDiv.style.cssText = 'margin-bottom: 16px; display: flex; ' + (isOutgoing ? 'justify-content: flex-end;' : 'justify-content: flex-start;');
            
            // Add status attribute for tracking
            if (message.status) {
                messageDiv.setAttribute('data-status', message.status);
            }
            
            var statusIcon = '';
            if (isOutgoing) {
                if (message.status === 'sending') {
                    statusIcon = '<span class="message-status" style="margin-left: 8px; font-size: 12px;">‚è≥</span>';
                } else if (message.status === 'failed') {
                    statusIcon = '<span class="message-status" style="margin-left: 8px; font-size: 12px;">‚ùå</span>';
                } else {
                    statusIcon = '<span class="message-status" style="margin-left: 8px; font-size: 12px;">‚úì</span>';
                }
            }
            
            messageDiv.innerHTML = 
                '<div style="max-width: 70%; padding: 12px 16px; border-radius: 18px; ' + 
                    (isOutgoing ? 
                        'background: #3b82f6; color: white; border-bottom-right-radius: 4px;' : 
                        'background: #f3f4f6; color: #111827; border-bottom-left-radius: 4px;'
                    ) + '">' +
                    '<div style="word-wrap: break-word; line-height: 1.4;">' + (message.body || message.content || 'Mensaje sin contenido') + '</div>' +
                    '<div style="font-size: 11px; margin-top: 4px; opacity: 0.7; display: flex; align-items: center; justify-content: space-between;">' + 
                        '<span>' + messageTime + '</span>' + statusIcon +
                    '</div>' +
                '</div>';
            
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        // Add new conversation to list
        function addConversationToList(conversation) {
            var container = document.getElementById('conversationsList');
            if (!container) return;
            
            // Check if conversation already exists
            var existing = document.querySelector('[data-conversation-id="' + conversation.id + '"]');
            if (existing) return;
            
            // Create new conversation element (reuse the same code from autoLoadConversations)
            var div = document.createElement('div');
            div.className = 'conversation-item';
            div.style.cssText = 'padding: 16px; border-bottom: 1px solid #e5e7eb; cursor: pointer; transition: all 0.2s ease; background: white;';
            div.dataset.conversationId = conversation.id;
            
            var initial = (conversation.contactName || 'U').charAt(0).toUpperCase();
            var timeStr = new Date().toLocaleTimeString('es-ES', {hour: '2-digit', minute: '2-digit'});
            
            div.innerHTML = 
                '<div style="display: flex; align-items: flex-start; gap: 12px;">' +
                    '<div style="width: 48px; height: 48px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; flex-shrink: 0; box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);">' +
                        '<span style="color: white; font-weight: 600; font-size: 16px;">' + initial + '</span>' +
                    '</div>' +
                    '<div style="flex: 1; min-width: 0;">' +
                        '<div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 6px;">' +
                            '<h4 style="font-weight: 600; color: #111827; margin: 0; font-size: 15px; line-height: 1.2;">' + (conversation.contactName || 'Usuario desconocido') + '</h4>' +
                            '<span style="font-size: 12px; color: #6b7280; font-weight: 500;">' + timeStr + '</span>' +
                        '</div>' +
                        '<p style="font-size: 13px; color: #6b7280; margin: 0 0 10px 0; line-height: 1.3;">Nueva conversaci√≥n</p>' +
                        '<div style="display: flex; align-items: center; justify-content: space-between;">' +
                            '<span style="display: inline-flex; align-items: center; padding: 4px 10px; border-radius: 16px; font-size: 11px; font-weight: 600; background-color: #3b82f615; color: #3b82f6; border: 1px solid #3b82f625;">üì• Entrada</span>' +
                            '<span style="font-size: 11px; color: #9ca3af; font-weight: 500;">#' + conversation.id + '</span>' +
                        '</div>' +
                    '</div>' +
                '</div>';
            
            // Add click handler (same as autoLoadConversations)
            div.addEventListener('click', function() {
                var items = container.querySelectorAll('.conversation-item');
                for (var j = 0; j < items.length; j++) {
                    items[j].classList.remove('selected');
                    items[j].style.backgroundColor = 'white';
                    items[j].style.borderLeft = 'none';
                    items[j].style.transform = 'translateX(0)';
                }
                
                this.classList.add('selected');
                this.style.backgroundColor = '#eff6ff';
                this.style.borderLeft = '4px solid #3b82f6';
                this.style.transform = 'translateX(4px)';
                
                loadMessages(conversation.id, conversation.contactName);
            });
            
            // Add to top of list
            container.insertBefore(div, container.firstChild);
        }
        
        // Auto-load after 1 second
        setTimeout(function() {
            autoLoadConversations();
            // Configurar scroll infinito despu√©s de cargar
            setTimeout(setupInfiniteScroll, 2000);
            // Iniciar auto-actualizaciones despu√©s de cargar
            setTimeout(startAutoUpdates, 3000);
        }, 1000);
        
        // Pausar actualizaciones cuando la p√°gina no est√© visible
        document.addEventListener('visibilitychange', function() {
            if (document.visibilityState === 'hidden') {
                console.log('‚è∏Ô∏è Pausando auto-actualizaciones (p√°gina oculta)');
                if (window.updateInterval) {
                    clearInterval(window.updateInterval);
                    window.updateInterval = null;
                }
            } else if (document.visibilityState === 'visible') {
                console.log('‚ñ∂Ô∏è Reanudando auto-actualizaciones (p√°gina visible)');
                startAutoUpdates();
            }
        });
        
        // Test API function
        function testAPI() {
            console.log('üß™ Testing API...');
            
            var instanceId = getActiveInstanceId();
            if (!instanceId) {
                alert('‚ùå No hay instancias activas para probar');
                return;
            }
            
            fetch('/api/conversations/instance/' + instanceId, {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                
                if (!response.ok) {
                    throw new Error('HTTP ' + response.status + ': ' + response.statusText);
                }
                
                return response.text(); // Get as text first to see what we're getting
            })
            .then(text => {
                try {
                    var data = JSON.parse(text);
                    alert('‚úÖ API Test Success! Found ' + (data.data?.conversations?.length || 0) + ' conversations');
                } catch (e) {
                    alert('‚ùå API returned non-JSON: ' + text.substring(0, 100));
                }
            })
            .catch(error => {
                alert('‚ùå API Test Failed: ' + error.message);
            });
        }
        
        // Make functions globally available
        window.refreshConversations = autoLoadConversations;
        window.loadMessages = loadMessages;
        window.sendMessage = sendMessage;
        window.filterConversations = filterConversations;
        window.clearSearch = clearSearch;
        window.filterByStatus = filterByStatus;
        window.testAPI = testAPI;
    } catch (globalError) {
        console.error('CRM Script Error:', globalError);
    }
    </script>
    
</body>
</html>