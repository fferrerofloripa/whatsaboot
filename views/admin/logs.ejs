<div class="space-y-6">
    <!-- Header -->
    <div class="bg-white rounded-lg shadow-sm p-6">
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-2xl font-bold text-gray-900">Panel de Logs</h1>
                <p class="text-gray-600 mt-1">Monitoreo y debugging del sistema</p>
            </div>
            <div class="flex items-center space-x-4">
                <button onclick="refreshStats()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center">
                    <i class="fas fa-sync mr-2"></i>
                    Actualizar
                </button>
                <button onclick="showCleanupModal()" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg flex items-center">
                    <i class="fas fa-trash mr-2"></i>
                    Limpiar Logs
                </button>
            </div>
        </div>
    </div>

    <!-- System Stats -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div class="bg-white rounded-lg shadow-sm p-6">
            <div class="flex items-center">
                <div class="p-3 bg-green-100 rounded-lg">
                    <i class="fas fa-server text-green-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Tiempo Activo</p>
                    <p id="uptime" class="text-2xl font-semibold text-gray-900">--</p>
                </div>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow-sm p-6">
            <div class="flex items-center">
                <div class="p-3 bg-blue-100 rounded-lg">
                    <i class="fas fa-memory text-blue-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Memoria</p>
                    <p id="memory" class="text-2xl font-semibold text-gray-900">--</p>
                </div>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow-sm p-6">
            <div class="flex items-center">
                <div class="p-3 bg-yellow-100 rounded-lg">
                    <i class="fab fa-whatsapp text-yellow-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Clientes Activos</p>
                    <p id="activeClients" class="text-2xl font-semibold text-gray-900">--</p>
                </div>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow-sm p-6">
            <div class="flex items-center">
                <div class="p-3 bg-purple-100 rounded-lg">
                    <i class="fas fa-users text-purple-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Usuarios Totales</p>
                    <p id="totalUsers" class="text-2xl font-semibold text-gray-900">--</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Live Logs Panel -->
    <div class="bg-white rounded-lg shadow-sm">
        <div class="p-6 border-b border-gray-200">
            <div class="flex items-center justify-between">
                <h2 class="text-lg font-semibold text-gray-900">Logs en Tiempo Real</h2>
                <div class="flex items-center space-x-4">
                    <select id="logLevel" onchange="refreshLiveLogs()" class="px-3 py-2 border border-gray-300 rounded-lg">
                        <option value="all">Todos los niveles</option>
                        <option value="error">Errores</option>
                        <option value="warn">Advertencias</option>
                        <option value="info" selected>Información</option>
                        <option value="debug">Debug</option>
                    </select>
                    <button onclick="toggleAutoRefresh()" id="autoRefreshBtn" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg flex items-center">
                        <i class="fas fa-play mr-2"></i>
                        Auto Refresh
                    </button>
                </div>
            </div>
        </div>
        
        <div class="p-6">
            <div id="liveLogs" class="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm h-96 overflow-y-auto">
                <div class="text-center text-gray-500 mt-20">
                    <i class="fas fa-spinner fa-spin text-2xl mb-4"></i>
                    <p>Cargando logs...</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Log Files List -->
    <div class="bg-white rounded-lg shadow-sm">
        <div class="p-6 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-900">Archivos de Log</h2>
        </div>
        
        <div class="p-6">
            <% if (logFiles.length > 0) { %>
                <div class="overflow-x-auto">
                    <table class="min-w-full table-auto">
                        <thead>
                            <tr class="bg-gray-50">
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Archivo
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Tamaño
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Última Modificación
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Acciones
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <% logFiles.forEach(file => { %>
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <i class="fas fa-file-alt text-gray-400 mr-3"></i>
                                            <span class="text-sm font-medium text-gray-900"><%= file.name %></span>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        <%= file.size %>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        <%= file.modified %>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                        <button onclick="viewLogFile('<%= file.name %>')" class="text-blue-600 hover:text-blue-900 mr-3">
                                            <i class="fas fa-eye mr-1"></i>
                                            Ver
                                        </button>
                                        <button onclick="downloadLogFile('<%= file.name %>')" class="text-green-600 hover:text-green-900">
                                            <i class="fas fa-download mr-1"></i>
                                            Descargar
                                        </button>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            <% } else { %>
                <div class="text-center py-12">
                    <div class="text-gray-400 text-6xl mb-4">
                        <i class="fas fa-file-alt"></i>
                    </div>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">No hay archivos de log</h3>
                    <p class="text-gray-600">Los logs aparecerán aquí cuando la aplicación genere registros.</p>
                </div>
            <% } %>
        </div>
    </div>
</div>

<!-- Log Viewer Modal -->
<div id="logViewerModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
    <div class="flex items-center justify-center h-full p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] flex flex-col">
            <div class="p-6 border-b border-gray-200 flex justify-between items-center">
                <h3 id="logFileName" class="text-lg font-semibold text-gray-900">Visualizar Log</h3>
                <button onclick="closeLogViewer()" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            
            <div class="flex-1 p-6 overflow-hidden">
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Líneas a mostrar:</label>
                    <select id="logLines" onchange="refreshLogContent()" class="px-3 py-2 border border-gray-300 rounded-lg">
                        <option value="50">50 líneas</option>
                        <option value="100" selected>100 líneas</option>
                        <option value="200">200 líneas</option>
                        <option value="500">500 líneas</option>
                    </select>
                </div>
                
                <div id="logContent" class="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm h-96 overflow-y-auto">
                    <div class="text-center text-gray-500 mt-20">
                        <i class="fas fa-spinner fa-spin text-2xl mb-4"></i>
                        <p>Cargando contenido...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Cleanup Modal -->
<div id="cleanupModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
    <div class="flex items-center justify-center h-full p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
            <div class="p-6 border-b border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900">Limpiar Logs Antiguos</h3>
            </div>
            
            <div class="p-6">
                <p class="text-gray-600 mb-4">¿Cuántos días de logs quieres mantener?</p>
                <select id="cleanupDays" class="w-full px-3 py-2 border border-gray-300 rounded-lg">
                    <option value="1">1 día</option>
                    <option value="3">3 días</option>
                    <option value="7" selected>7 días</option>
                    <option value="14">14 días</option>
                    <option value="30">30 días</option>
                </select>
                
                <div class="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <div class="flex items-center">
                        <i class="fas fa-exclamation-triangle text-yellow-600 mr-2"></i>
                        <span class="text-sm text-yellow-800">Esta acción no se puede deshacer</span>
                    </div>
                </div>
            </div>
            
            <div class="p-6 border-t border-gray-200 flex justify-end space-x-3">
                <button onclick="closeCleanupModal()" class="px-4 py-2 text-gray-600 hover:text-gray-800">
                    Cancelar
                </button>
                <button onclick="performCleanup()" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg">
                    Limpiar Logs
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // Panel de logs v2.0 - Todas las funciones incluidas
    let autoRefreshInterval = null;
    let currentLogFile = null;

    // API helper function
    async function apiCall(url, options = {}) {
        try {
            const response = await fetch(url, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });
            
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Error en la petición');
            }
            
            return response.json();
        } catch (error) {
            console.error('API Error:', error);
            throw error;
        }
    }

    // Load stats on page load
    document.addEventListener('DOMContentLoaded', function() {
        console.log('🔍 DEBUG: Panel de logs cargado');
        console.log('🔍 DEBUG: viewLogFile definido:', typeof viewLogFile);
        console.log('🔍 DEBUG: downloadLogFile definido:', typeof downloadLogFile);
        refreshStats();
        refreshLiveLogs();
    });

    // System stats functions
    async function refreshStats() {
        try {
            const result = await apiCall('/admin/logs/stats');
            if (result.success) {
                const stats = result.stats;
                
                // Update uptime
                const uptime = Math.floor(stats.system.uptime);
                const hours = Math.floor(uptime / 3600);
                const minutes = Math.floor((uptime % 3600) / 60);
                document.getElementById('uptime').textContent = `${hours}h ${minutes}m`;
                
                // Update memory
                const memoryMB = Math.round(stats.system.memoryUsage.used / 1024 / 1024);
                document.getElementById('memory').textContent = `${memoryMB} MB`;
                
                // Update WhatsApp clients
                document.getElementById('activeClients').textContent = stats.whatsapp.activeClients;
                
                // Update users
                document.getElementById('totalUsers').textContent = stats.database.totalUsers;
            }
        } catch (error) {
            console.error('Error refreshing stats:', error);
        }
    }

    // Live logs functions
    async function refreshLiveLogs() {
        try {
            console.log('🔍 DEBUG: Refreshing live logs...');
            const level = document.getElementById('logLevel').value;
            console.log('🔍 DEBUG: Log level:', level);
            const result = await apiCall(`/admin/logs/live?level=${level}&limit=50`);
            
            if (result.success) {
                const logsContainer = document.getElementById('liveLogs');
                console.log('🔍 DEBUG: Logs received:', result.logs);
                
                if (result.logs.length === 0) {
                    logsContainer.innerHTML = '<div class="text-center text-gray-500 mt-20"><p>No hay logs disponibles</p></div>';
                    return;
                }
                
                const logsHtml = result.logs.map(log => {
                    const levelColor = {
                        error: 'text-red-400',
                        warn: 'text-yellow-400',
                        info: 'text-blue-400',
                        debug: 'text-gray-400'
                    }[log.level] || 'text-green-400';
                    
                    const timestamp = new Date(log.timestamp).toLocaleString('es-ES');
                    return `<div class="mb-1"><span class="text-gray-500">[${timestamp}]</span> <span class="${levelColor}">[${log.level.toUpperCase()}]</span> ${log.message}</div>`;
                }).join('');
                
                logsContainer.innerHTML = logsHtml;
                logsContainer.scrollTop = logsContainer.scrollHeight;
            } else {
                console.error('Error en respuesta de logs:', result);
                document.getElementById('liveLogs').innerHTML = '<div class="text-center text-red-500 mt-20"><p>Error al cargar logs</p></div>';
            }
        } catch (error) {
            console.error('Error refreshing live logs:', error);
            document.getElementById('liveLogs').innerHTML = '<div class="text-center text-red-500 mt-20"><p>Error de conexión</p></div>';
        }
    }

    function toggleAutoRefresh() {
        const btn = document.getElementById('autoRefreshBtn');
        
        if (autoRefreshInterval) {
            clearInterval(autoRefreshInterval);
            autoRefreshInterval = null;
            btn.innerHTML = '<i class="fas fa-play mr-2"></i>Auto Refresh';
            btn.className = 'bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg flex items-center';
        } else {
            autoRefreshInterval = setInterval(() => {
                refreshLiveLogs();
                refreshStats();
            }, 5000);
            btn.innerHTML = '<i class="fas fa-pause mr-2"></i>Pausar';
            btn.className = 'bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center';
        }
    }

    // Log file viewer functions
    async function viewLogFile(filename) {
        currentLogFile = filename;
        document.getElementById('logFileName').textContent = `Log: ${filename}`;
        document.getElementById('logViewerModal').classList.remove('hidden');
        await refreshLogContent();
    }

    async function refreshLogContent() {
        if (!currentLogFile) return;
        
        try {
            const lines = document.getElementById('logLines').value;
            const result = await apiCall(`/admin/logs/file/${currentLogFile}?lines=${lines}`);
            
            if (result.success) {
                const content = result.content || 'Archivo vacío';
                document.getElementById('logContent').innerHTML = `<pre>${content}</pre>`;
            }
        } catch (error) {
            document.getElementById('logContent').innerHTML = '<div class="text-red-400">Error al cargar el archivo</div>';
            console.error('Error loading log file:', error);
        }
    }

    function closeLogViewer() {
        document.getElementById('logViewerModal').classList.add('hidden');
        currentLogFile = null;
    }

    function downloadLogFile(filename) {
        const link = document.createElement('a');
        link.href = `/admin/logs/file/${filename}?download=true`;
        link.download = filename;
        link.click();
    }

    // Cleanup functions
    function showCleanupModal() {
        document.getElementById('cleanupModal').classList.remove('hidden');
    }

    function closeCleanupModal() {
        document.getElementById('cleanupModal').classList.add('hidden');
    }

    async function performCleanup() {
        try {
            const days = document.getElementById('cleanupDays').value;
            const result = await apiCall(`/admin/logs/clear?days=${days}`, {
                method: 'DELETE'
            });
            
            if (result.success) {
                alert(result.message);
                closeCleanupModal();
                setTimeout(() => location.reload(), 1000);
            }
        } catch (error) {
            console.error('Error performing cleanup:', error);
        }
    }

    // Close modals when clicking outside
    document.getElementById('logViewerModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeLogViewer();
        }
    });

    document.getElementById('cleanupModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeCleanupModal();
        }
    });
</script>
